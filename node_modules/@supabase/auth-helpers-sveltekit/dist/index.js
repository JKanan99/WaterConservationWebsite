// src/supabaseLoadClient.ts
import {
  isBrowser as isBrowser2
} from "@supabase/auth-helpers-shared";
import {
  createClient
} from "@supabase/supabase-js";

// src/loadStorageAdapter.ts
import {
  isBrowser,
  parseCookies,
  parseSupabaseCookie,
  serializeCookie,
  stringifySupabaseSession
} from "@supabase/auth-helpers-shared";
function supabaseAuthStorageAdapterSveltekitLoad({
  serverSession,
  cookieOptions: {
    name = "sb-auth-token",
    domain,
    maxAge = 60 * 60 * 24 * 365,
    path = "/",
    sameSite,
    secure
  } = {}
}) {
  if (!isBrowser()) {
    return {
      async getItem() {
        return JSON.stringify(serverSession);
      },
      setItem() {
      },
      removeItem() {
      }
    };
  }
  return {
    async getItem() {
      const sessionStr = parseCookies(document.cookie)[name];
      const session = parseSupabaseCookie(sessionStr);
      return JSON.stringify(session);
    },
    async setItem(_key, value) {
      const session = JSON.parse(value);
      const sessionStr = stringifySupabaseSession(session);
      document.cookie = serializeCookie(name, sessionStr, {
        domain,
        maxAge,
        path,
        sameSite,
        secure,
        httpOnly: false
      });
    },
    async removeItem() {
      document.cookie = serializeCookie(name, "", {
        domain,
        maxAge: 0,
        path,
        sameSite,
        secure,
        httpOnly: false
      });
    }
  };
}

// src/supabaseLoadClient.ts
var cachedBrowserClient;
var onAuthStateChangeSubscription;
function createSupabaseLoadClient({
  supabaseUrl,
  supabaseKey,
  event,
  serverSession,
  options,
  cookieOptions,
  onAuthStateChange
}) {
  var _a;
  const browser = isBrowser2();
  if (browser && cachedBrowserClient) {
    return cachedBrowserClient;
  }
  onAuthStateChangeSubscription == null ? void 0 : onAuthStateChangeSubscription.unsubscribe();
  const client = createClient(supabaseUrl, supabaseKey, {
    ...options,
    global: {
      fetch: event.fetch,
      ...options == null ? void 0 : options.global,
      headers: {
        ...(_a = options == null ? void 0 : options.global) == null ? void 0 : _a.headers,
        "X-Client-Info": `${"@supabase/auth-helpers-sveltekit"}@${"0.9.4"}`
      }
    },
    auth: {
      autoRefreshToken: browser,
      detectSessionInUrl: browser,
      persistSession: true,
      storage: supabaseAuthStorageAdapterSveltekitLoad({
        cookieOptions,
        serverSession
      })
    }
  });
  if (browser) {
    cachedBrowserClient = client;
    onAuthStateChangeSubscription = onAuthStateChange ? cachedBrowserClient.auth.onAuthStateChange((event2, authSession) => {
      onAuthStateChange == null ? void 0 : onAuthStateChange(event2, authSession);
    }).data.subscription : void 0;
  }
  return client;
}

// src/supabaseServerClient.ts
import { createClient as createClient2 } from "@supabase/supabase-js";

// src/serverStorageAdapter.ts
import {
  parseSupabaseCookie as parseSupabaseCookie2,
  stringifySupabaseSession as stringifySupabaseSession2
} from "@supabase/auth-helpers-shared";
function supabaseAuthStorageAdapterSveltekitServer({
  cookies,
  cookieOptions: {
    name = "sb-auth-token",
    domain,
    maxAge = 60 * 60 * 24 * 365,
    path = "/",
    sameSite,
    secure,
    httpOnly = false
  } = {},
  expiryMargin = 60
}) {
  let currentSession;
  let isInitialDelete = true;
  return {
    async getItem() {
      const sessionStr = cookies.get(name);
      const session = currentSession = parseSupabaseCookie2(sessionStr);
      if (session == null ? void 0 : session.expires_at) {
        session.expires_at -= expiryMargin;
      }
      return JSON.stringify(session);
    },
    async setItem(_key, value) {
      const session = JSON.parse(value);
      const sessionStr = stringifySupabaseSession2(session);
      cookies.set(name, sessionStr, {
        domain,
        maxAge,
        path,
        sameSite,
        secure,
        httpOnly
      });
    },
    async removeItem() {
      if (isInitialDelete && (currentSession == null ? void 0 : currentSession.expires_at)) {
        const now = Math.round(Date.now() / 1e3);
        if (currentSession.expires_at < now + 10) {
          isInitialDelete = false;
          return;
        }
      }
      cookies.delete(name, {
        domain,
        maxAge,
        path,
        sameSite,
        secure,
        httpOnly
      });
    }
  };
}

// src/supabaseServerClient.ts
function createSupabaseServerClient({
  supabaseUrl,
  supabaseKey,
  event,
  options,
  cookieOptions,
  expiryMargin
}) {
  var _a;
  return createClient2(supabaseUrl, supabaseKey, {
    ...options,
    global: {
      ...options == null ? void 0 : options.global,
      headers: {
        ...(_a = options == null ? void 0 : options.global) == null ? void 0 : _a.headers,
        "X-Client-Info": `${"@supabase/auth-helpers-sveltekit"}@${"0.9.4"}`
      }
    },
    auth: {
      autoRefreshToken: false,
      detectSessionInUrl: false,
      persistSession: true,
      storage: supabaseAuthStorageAdapterSveltekitServer({
        cookies: event.cookies,
        cookieOptions,
        expiryMargin
      })
    }
  });
}
export {
  createSupabaseLoadClient,
  createSupabaseServerClient
};
//# sourceMappingURL=index.js.map