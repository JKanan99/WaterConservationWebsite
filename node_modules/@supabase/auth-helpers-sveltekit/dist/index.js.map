{"version":3,"sources":["../src/supabaseLoadClient.ts","../src/loadStorageAdapter.ts","../src/supabaseServerClient.ts","../src/serverStorageAdapter.ts"],"sourcesContent":["import {\n  CookieOptions,\n  isBrowser,\n  SupabaseClientOptionsWithoutAuth\n} from '@supabase/auth-helpers-shared';\nimport {\n  AuthChangeEvent,\n  createClient,\n  Session,\n  Subscription,\n  SupabaseClient\n} from '@supabase/supabase-js';\nimport { LoadEvent } from '@sveltejs/kit';\nimport { supabaseAuthStorageAdapterSveltekitLoad } from './loadStorageAdapter';\n\nlet cachedBrowserClient: SupabaseClient<any, string> | undefined;\nlet onAuthStateChangeSubscription: Subscription | undefined;\n\n/**\n * ## Authenticated Supabase client\n *\n * Returns a new authenticated Supabase client.\n *\n * When running in the browser it will create a single instance\n * that is returned for subsequent runs.\n *\n * ### Example:\n *\n * ```ts\n * import { invalidate } from '$app/navigation';\n * import { PUBLIC_SUPABASE_ANON_KEY, PUBLIC_SUPABASE_URL } from '$env/static/public';\n * import { createSupabaseLoadClient } from '@supabase/auth-helpers-sveltekit';\n * import type { LayoutLoad } from './$types';\n *\n * export const load: LayoutLoad = async ({ fetch, data, depends }) => {\n *   depends('supabase:auth');\n *\n *   const supabase = createSupabaseLoadClient({\n *     supabaseUrl: PUBLIC_SUPABASE_URL,\n *     supabaseKey: PUBLIC_SUPABASE_ANON_KEY,\n *     event: { fetch },\n *     serverSession: data.session,\n *     onAuthStateChange() {\n *       invalidate('supabase:auth');\n *     }\n *   });\n *\n *   const {\n *     data: { session }\n * \t} = await supabase.auth.getSession();\n *\n *   return { supabase, session };\n * };\n *\n * ```\n */\nexport function createSupabaseLoadClient<\n  Database = any,\n  SchemaName extends string & keyof Database = 'public' extends keyof Database\n    ? 'public'\n    : string & keyof Database\n>({\n  supabaseUrl,\n  supabaseKey,\n  event,\n  serverSession,\n  options,\n  cookieOptions,\n  onAuthStateChange\n}: {\n  supabaseUrl: string;\n  /**\n   * The supabase key. Make sure you **always** use the ANON_KEY.\n   */\n  supabaseKey: string;\n  event: Pick<LoadEvent, 'fetch'>;\n  /**\n   * The initial session from the server.\n   */\n  serverSession: Session | null;\n  options?: SupabaseClientOptionsWithoutAuth<SchemaName>;\n  cookieOptions?: CookieOptions;\n  /**\n   * The event listener only runs in the browser.\n   * @deprecated DO NOT USE THIS\n   *\n   * use this instead: https://supabase.com/docs/guides/auth/auth-helpers/sveltekit#setting-up-the-event-listener-on-the-client-side\n   */\n  onAuthStateChange?: (event: AuthChangeEvent, session: Session | null) => void;\n}): SupabaseClient<Database, SchemaName> {\n  const browser = isBrowser();\n  if (browser && cachedBrowserClient) {\n    return cachedBrowserClient as SupabaseClient<Database, SchemaName>;\n  }\n\n  // this should never happen\n  onAuthStateChangeSubscription?.unsubscribe();\n\n  const client = createClient<Database, SchemaName>(supabaseUrl, supabaseKey, {\n    ...options,\n    global: {\n      fetch: event.fetch,\n      ...options?.global,\n      headers: {\n        ...options?.global?.headers,\n        'X-Client-Info': `${PACKAGE_NAME}@${PACKAGE_VERSION}`\n      }\n    },\n    auth: {\n      autoRefreshToken: browser,\n      detectSessionInUrl: browser,\n      persistSession: true,\n      storage: supabaseAuthStorageAdapterSveltekitLoad({\n        cookieOptions,\n        serverSession\n      })\n    }\n  });\n\n  if (browser) {\n    cachedBrowserClient = client;\n    onAuthStateChangeSubscription = onAuthStateChange\n      ? cachedBrowserClient.auth.onAuthStateChange((event, authSession) => {\n          onAuthStateChange?.(event, authSession);\n        }).data.subscription\n      : undefined;\n  }\n\n  return client;\n}\n","import {\n  CookieOptions,\n  isBrowser,\n  parseCookies,\n  parseSupabaseCookie,\n  serializeCookie,\n  stringifySupabaseSession\n} from '@supabase/auth-helpers-shared';\nimport { Session, GoTrueClientOptions } from '@supabase/supabase-js';\n\nexport function supabaseAuthStorageAdapterSveltekitLoad({\n  serverSession,\n  cookieOptions: {\n    name = 'sb-auth-token',\n    domain,\n    maxAge = 60 * 60 * 24 * 365,\n    path = '/',\n    sameSite,\n    secure\n  } = {}\n}: {\n  serverSession?: Session | null;\n  cookieOptions?: CookieOptions;\n}): GoTrueClientOptions['storage'] {\n  if (!isBrowser()) {\n    return {\n      async getItem() {\n        return JSON.stringify(serverSession);\n      },\n      setItem() {},\n      removeItem() {}\n    };\n  }\n\n  return {\n    async getItem() {\n      const sessionStr = parseCookies(document.cookie)[name];\n      const session = parseSupabaseCookie(sessionStr);\n      return JSON.stringify(session);\n    },\n    async setItem(_key: string, value: string) {\n      const session = JSON.parse(value);\n      const sessionStr = stringifySupabaseSession(session);\n      document.cookie = serializeCookie(name, sessionStr, {\n        domain,\n        maxAge,\n        path,\n        sameSite,\n        secure,\n        httpOnly: false\n      });\n    },\n    async removeItem() {\n      document.cookie = serializeCookie(name, '', {\n        domain,\n        maxAge: 0,\n        path,\n        sameSite,\n        secure,\n        httpOnly: false\n      });\n    }\n  };\n}\n","import {\n  CookieOptions,\n  SupabaseClientOptionsWithoutAuth\n} from '@supabase/auth-helpers-shared';\nimport { createClient } from '@supabase/supabase-js';\nimport { RequestEvent } from '@sveltejs/kit';\nimport { supabaseAuthStorageAdapterSveltekitServer } from './serverStorageAdapter';\n\n/**\n * ## Authenticated Supabase client\n * ### Handle\n *\n * ```ts\n * import { PUBLIC_SUPABASE_URL, PUBLIC_SUPABASE_ANON_KEY } from '$env/static/public';\n * import { createSupabaseServerClient } from '@supabase/auth-helpers-sveltekit';\n * import type { Handle } from '@sveltejs/kit';\n *\n * export const handle: Handle = async ({ event, resolve }) => {\n *   event.locals.supabase = createSupabaseServerClient({\n *     supabaseUrl: PUBLIC_SUPABASE_URL,\n *     supabaseKey: PUBLIC_SUPABASE_ANON_KEY,\n *     event\n *   });\n *\n *   event.locals.getSession = async () => {\n *     const {\n *       data: { session }\n *     } = await event.locals.supabase.auth.getSession();\n *     return session;\n *   };\n *\n *   return resolve(event, {\n *     filterSerializedResponseHeaders(name) {\n *       return name === 'content-range';\n *     }\n *   });\n * };\n * ```\n *\n * ### Types\n *\n * ```ts\n * import { SupabaseClient, Session } from '@supabase/supabase-js';\n *\n * declare global {\n *   namespace App {\n *     interface Locals {\n *       supabase: SupabaseClient;\n *       getSession(): Promise<Session | null>;\n *     }\n *     // interface PageData {}\n *     // interface Error {}\n *     // interface Platform {}\n *   }\n * }\n *\n * export {};\n * ```\n */\nexport function createSupabaseServerClient<\n  Database = any,\n  SchemaName extends string & keyof Database = 'public' extends keyof Database\n    ? 'public'\n    : string & keyof Database\n>({\n  supabaseUrl,\n  supabaseKey,\n  event,\n  options,\n  cookieOptions,\n  expiryMargin\n}: {\n  supabaseUrl: string;\n  supabaseKey: string;\n  event: Pick<RequestEvent, 'cookies'>;\n  options?: SupabaseClientOptionsWithoutAuth<SchemaName>;\n  cookieOptions?: CookieOptions;\n  expiryMargin?: number;\n}) {\n  return createClient<Database, SchemaName>(supabaseUrl, supabaseKey, {\n    ...options,\n    global: {\n      ...options?.global,\n      headers: {\n        ...options?.global?.headers,\n        'X-Client-Info': `${PACKAGE_NAME}@${PACKAGE_VERSION}`\n      }\n    },\n    auth: {\n      autoRefreshToken: false,\n      detectSessionInUrl: false,\n      persistSession: true,\n      storage: supabaseAuthStorageAdapterSveltekitServer({\n        cookies: event.cookies,\n        cookieOptions,\n        expiryMargin\n      })\n    }\n  });\n}\n","import {\n  CookieOptions,\n  parseSupabaseCookie,\n  stringifySupabaseSession\n} from '@supabase/auth-helpers-shared';\nimport { RequestEvent } from '@sveltejs/kit';\nimport { GoTrueClientOptions, Session } from '@supabase/supabase-js';\n\nexport function supabaseAuthStorageAdapterSveltekitServer({\n  cookies,\n  cookieOptions: {\n    name = 'sb-auth-token',\n    domain,\n    maxAge = 60 * 60 * 24 * 365,\n    path = '/',\n    sameSite,\n    secure,\n    httpOnly = false\n  } = {},\n  expiryMargin = 60\n}: {\n  cookies: RequestEvent['cookies'];\n  cookieOptions?: CookieOptions & { httpOnly?: boolean };\n  expiryMargin?: number;\n}): GoTrueClientOptions['storage'] {\n  let currentSession: Partial<Session> | null;\n  let isInitialDelete = true;\n\n  return {\n    async getItem() {\n      const sessionStr = cookies.get(name);\n      const session = (currentSession = parseSupabaseCookie(sessionStr));\n      if (session?.expires_at) {\n        // shorten the session lifetime so it does not expire on the server\n        session.expires_at -= expiryMargin;\n      }\n      return JSON.stringify(session);\n    },\n    async setItem(_key: string, value: string) {\n      const session = JSON.parse(value);\n      const sessionStr = stringifySupabaseSession(session);\n      cookies.set(name, sessionStr, {\n        domain,\n        maxAge,\n        path,\n        sameSite,\n        secure,\n        httpOnly\n      });\n    },\n    async removeItem() {\n      // workaround until https://github.com/supabase/gotrue-js/pull/598\n      if (isInitialDelete && currentSession?.expires_at) {\n        const now = Math.round(Date.now() / 1000);\n        if (currentSession.expires_at < now + 10) {\n          isInitialDelete = false;\n          return;\n        }\n      }\n      cookies.delete(name, {\n        domain,\n        maxAge,\n        path,\n        sameSite,\n        secure,\n        httpOnly\n      });\n    }\n  };\n}\n"],"mappings":"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","names":["isBrowser","isBrowser","event","createClient","parseSupabaseCookie","stringifySupabaseSession","createClient"]}